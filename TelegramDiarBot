from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, CallbackQueryHandler, ContextTypes, ConversationHandler
)
import json
import os
from datetime import datetime, timedelta

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ---
FILE = "homework.json"
DAYS = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü‚Äô—è—Ç–Ω–∏—Ü—è"]

# --- –°—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏ ---
SELECT_DAY, SELECT_SUBJECT, ADD_HOMEWORK = range(3)

# --- –†–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤ ---
WEEK_SCHEDULE = {
    "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫": ["–ú–∏—Å—Ç–µ—Ü—Ç–≤–æ", "–£–∫—Ä. –º–æ–≤–∞", "–£–∫—Ä. –ª—ñ—Ç.", "–ê–Ω–≥–ª. –º–æ–≤–∞", "–ë—ñ–æ–ª–æ–≥—ñ—è", "–ê–ª–≥–µ–±—Ä–∞", "–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"],
    "–í—ñ–≤—Ç–æ—Ä–æ–∫": ["–£–∫—Ä.–º–æ–≤–∞", "–ê–ª–≥–µ–±—Ä–∞", "–§—ñ–∑-—Ä–∞", "–§—ñ–∑–∏–∫–∞", "–ó–∞—Ä.–ª—ñ—Ç.", "–ì–µ–æ–º–µ—Ç—Ä—ñ—è", "–£–∫—Ä.–ª—ñ—Ç"],
    "–°–µ—Ä–µ–¥–∞": ["–ê–Ω–≥–ª.–º–æ–≤", "–ì–µ–æ–º–µ—Ç—Ä—ñ—è", "–£–∫—Ä.–º–æ–≤", "–£–∫—Ä.–ª—ñ—Ç", "–Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏ // –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è", "–ì—Ä–æ–º–∞–¥—è–Ω—Å—å–∫–∞", "–•—ñ–º—ñ—è"],
    "–ß–µ—Ç–≤–µ—Ä": ["–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ // –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ", "–ë—ñ–æ–ª–æ–≥—ñ—è", "–Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏", "–§—ñ–∑-—Ä–∞", "–ê–Ω–≥–ª.–º–æ–≤", "–§—ñ–∑–∏–∫–∞", "–ì—Ä–æ–º–∞–¥—è–Ω—Å—å–∫–∞"],
    "–ü‚Äô—è—Ç–Ω–∏—Ü—è": ["–ì–µ–æ–≥—Ä–∞—Ñ—ñ—è", "–§—ñ–∑–∏–∫–∞", "–£–∫—Ä.–º–æ–≤–∞", "–£–∫—Ä.–º–æ–≤–∞", "–§—ñ–∑-—Ä–∞", "–í—Å–µ—Å–≤—ñ—Ç–Ω—è –Ü—Å—Ç–æ—Ä—ñ—è", "–•—ñ–º—ñ—è 05"]
}

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ---
def load_homework():
    if not os.path.exists(FILE):
        return {"homework": {}, "old_homework": {}, "last_month": datetime.now().month}
    with open(FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_homework(data):
    with open(FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---
def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìö –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ–º–∞—à–Ω—î", callback_data="view_homework")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ–º–∞—à–Ω—î", callback_data="add_homework")],
        [InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –¥–æ–º–∞—à–Ω—î", callback_data="delete_homework")],
        [InlineKeyboardButton("üìú –°—Ç–∞—Ä—ñ –¥–æ–º–∞—à–Ω—ñ", callback_data="view_old_homework")],
        [InlineKeyboardButton("üìÖ –†–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤", callback_data="view_schedule")]
    ])

def days_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton(day, callback_data=f"day_{day}")] for day in DAYS])

def subjects_keyboard(day):
    subjects = WEEK_SCHEDULE.get(day, [])
    if not subjects:
        return InlineKeyboardMarkup([[InlineKeyboardButton("–ù–µ–º–∞—î —É—Ä–æ–∫—ñ–≤", callback_data="menu")]])
    return InlineKeyboardMarkup([[InlineKeyboardButton(s, callback_data=f"subj_{s}")] for s in subjects])

# --- –õ–æ–≥—ñ–∫–∞ –¥–∞—Ç–∏ ---
def get_target_date(selected_day):
    today = datetime.now()
    current_day_index = today.weekday()  # 0 = –ø–æ–Ω–µ–¥—ñ–ª–æ–∫, 6 = –Ω–µ–¥—ñ–ª—è
    selected_index = DAYS.index(selected_day)
    delta_days = selected_index - current_day_index
    if delta_days <= 0:
        delta_days += 7
    target_date = today + timedelta(days=delta_days)
    return target_date.strftime("%Y-%m-%d")

def check_new_month():
    data = load_homework()
    current_month = datetime.now().month
    last_month = data.get("last_month", current_month)
    if current_month != last_month:
        old_hw = data.get("old_homework", {})
        for day, tasks in data.get("homework", {}).items():
            old_hw[day] = tasks
        data["homework"] = {}
        data["old_homework"] = old_hw
        data["last_month"] = current_month
        save_homework(data)

# --- –ö–æ–º–∞–Ω–¥–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    check_new_month()
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π —â–æ–¥–µ–Ω–Ω–∏–∫.\n–í–∏–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=main_menu_keyboard()
    )

# --- –ú–µ–Ω—é ---
async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

# --- –ü–µ—Ä–µ–≥–ª—è–¥ —Ä–æ–∑–∫–ª–∞–¥—É ---
async def view_schedule_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    msg = "üìÖ <b>–†–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤</b>:\n\n"
    for day in DAYS:
        msg += f"üìò <b>{day}:</b>\n"
        for subj in WEEK_SCHEDULE[day]:
            msg += f"   ‚Ä¢ {subj}\n"
        msg += "\n"
    await query.edit_message_text(msg, reply_markup=main_menu_keyboard(), parse_mode="HTML")

# --- –ü–µ—Ä–µ–≥–ª—è–¥ –¥–æ–º–∞—à–Ω—å–æ–≥–æ ---
async def view_homework_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    check_new_month()
    data = load_homework()
    homework = data.get("homework", {})

    if not homework:
        msg = "üì≠ –ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è."
    else:
        today = datetime.now().strftime("%Y-%m-%d")
        msg = "üìö <b>–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è</b>:\n\n"

        current_week = []
        next_week = []

        for day in DAYS:
            key_list = [k for k in homework.keys() if k.startswith(day)]
            key_list.sort()
            for key in key_list:
                date_str = key.split("(")[1].strip(")")
                if date_str >= today:
                    current_week.append((key, homework[key]))
                else:
                    next_week.append((key, homework[key]))

        for key, tasks in current_week + next_week:
            msg += f"üìÖ <b>{key}</b>:\n"
            for subj, hw in tasks.items():
                msg += f"  ‚úèÔ∏è {subj}: {hw}\n"
            msg += "\n"

    await query.edit_message_text(msg, reply_markup=main_menu_keyboard(), parse_mode="HTML")

# --- –ü–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–∞—Ä–∏—Ö –¥–æ–º–∞—à–Ω—ñ—Ö ---
async def view_old_homework_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = load_homework()
    old_hw = data.get("old_homework", {})

    if not old_hw:
        msg = "üì≠ –ù–µ–º–∞—î —Å—Ç–∞—Ä–∏—Ö –¥–æ–º–∞—à–Ω—ñ—Ö –∑–∞–≤–¥–∞–Ω—å."
    else:
        msg = "üìú <b>–°—Ç–∞—Ä—ñ –¥–æ–º–∞—à–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è</b>:\n\n"
        for day in DAYS:
            for key, tasks in old_hw.items():
                if key.startswith(day):
                    msg += f"üìÖ <b>{key}</b>:\n"
                    for subj, hw in tasks.items():
                        msg += f"  ‚úèÔ∏è {subj}: {hw}\n"
                    msg += "\n"

    await query.edit_message_text(msg, reply_markup=main_menu_keyboard(), parse_mode="HTML")

# --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–º–∞—à–Ω—å–æ–≥–æ ---
async def add_homework_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üìÜ –û–±–µ—Ä–∏ –¥–µ–Ω—å:", reply_markup=days_keyboard())
    return SELECT_DAY

async def select_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    day = query.data.replace("day_", "")
    context.user_data["day"] = day
    await query.edit_message_text(f"üìö –û–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è {day.lower()}:", reply_markup=subjects_keyboard(day))
    return SELECT_SUBJECT

async def select_subject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    subject = query.data.replace("subj_", "")
    context.user_data["subject"] = subject
    await query.edit_message_text(f"‚úèÔ∏è –í–≤–µ–¥–∏ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}':")
    return ADD_HOMEWORK

async def save_homework_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    day = context.user_data["day"]
    subject = context.user_data["subject"]
    data = load_homework()

    target_date = get_target_date(day)
    key = f"{day} ({target_date})"

    if "homework" not in data:
        data["homework"] = {}

    if key not in data["homework"]:
        data["homework"][key] = {}

    data["homework"][key][subject] = text
    save_homework(data)

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Å–∞–Ω–µ", callback_data="view_homework")],
        [InlineKeyboardButton("üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å —É –º–µ–Ω—é", callback_data="menu")]
    ])

    await update.message.reply_text(
        f"‚úÖ –î–æ–º–∞—à–Ω—î –∑ '{subject}' –Ω–∞ {day.lower()} –∑–∞–ø–∏—Å–∞–Ω–æ!\nüìÖ –î–∞—Ç–∞: {target_date}",
        reply_markup=keyboard
    )
    return ConversationHandler.END

# --- –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–æ–º–∞—à–Ω—å–æ–≥–æ ---
async def delete_homework_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = load_homework()
    homework = data.get("homework", {})

    if not homework:
        await query.edit_message_text("üì≠ –ù–µ–º–∞—î –Ω—ñ—á–æ–≥–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", reply_markup=main_menu_keyboard())
        return

    keyboard = [[InlineKeyboardButton(day, callback_data=f"del_{day}")] for day in homework.keys()]
    await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(keyboard))

async def confirm_del_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    key = query.data.replace("del_", "")
    data = load_homework()
    homework = data.get("homework", {})

    if key in homework:
        del homework[key]
        save_homework(data)
        msg = f"‚úÖ –î–æ–º–∞—à–Ω—î –¥–ª—è '{key}' –≤–∏–¥–∞–ª–µ–Ω–æ!"
    else:
        msg = "‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    keyboard = [[InlineKeyboardButton("üè† –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å —É –º–µ–Ω—é", callback_data="menu")]]
    await query.edit_message_text(msg, reply_markup=InlineKeyboardMarkup(keyboard))

# --- –°–∫–∞—Å—É–≤–∞–Ω–Ω—è ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard())
    return ConversationHandler.END

# --- –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---
def main():
    application = ApplicationBuilder().token("8267646504:AAHqwL9cXPAa1djaW5xcqj0pfj03wAYKmpQ").build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_homework_callback, pattern="^add_homework$")],
        states={
            SELECT_DAY: [CallbackQueryHandler(select_day, pattern="^day_")],
            SELECT_SUBJECT: [CallbackQueryHandler(select_subject, pattern="^subj_")],
            ADD_HOMEWORK: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_homework_text)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(view_homework_callback, pattern="^view_homework$"))
    application.add_handler(CallbackQueryHandler(view_old_homework_callback, pattern="^view_old_homework$"))
    application.add_handler(CallbackQueryHandler(delete_homework_callback, pattern="^delete_homework$"))
    application.add_handler(CallbackQueryHandler(confirm_del_callback, pattern="^del_"))
    application.add_handler(CallbackQueryHandler(menu_callback, pattern="^menu$"))
    application.add_handler(CallbackQueryHandler(view_schedule_callback, pattern="^view_schedule$"))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    application.run_polling()

if __name__ == "__main__":
    main()
{
  "–í—ñ–≤—Ç–æ—Ä–æ–∫": {
    "–ó–∞—Ä—É–±—ñ–∂–Ω–∞": "23 –ø–∞—Ä–∞–≥—Ä–∞—Ñ"
  },
  "–ß–µ—Ç–≤–µ—Ä": {
    "–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": "5 –ø–∞—Ä–∞–≥—Ä–∞—Ñ",
    "–Ü—Å—Ç–æ—Ä—ñ—è": "98 –ø–∞—Ä–∞–≥—Ä–∞—Ñ, 7 –ø–∞—Ä–∞–≥—Ä–∞—Ñ"
  },
  "–Ü—Å—Ç–æ—Ä—ñ—è": {
    "–Ü—Å—Ç–æ—Ä—ñ—è": "5 –ø–∞—Ä–∞–≥—Ä–∞—Ñ"
  },
  "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫": {
    "4": "–†–æ–æ"
  },
  "–ü‚Äô—è—Ç–Ω–∏—Ü—è (2025-10-17)": {
    "–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è": "–ö–∞—Ä–æ—á —Ç—É–¥–∞ —Å—é–¥–∞",
    "–ì–µ–æ–≥—Ä–∞—Ñ—ñ—è": "–ö–∞—Ä–æ—á –∫–æ–Ω—Å–ø–µ–∫—Ç"
  },
  "homework": {
    "–ß–µ—Ç–≤–µ—Ä (2025-10-16)": {
      "–Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏": "5 –ø–∞—Ä–∞–≥—Ä–∞—Ñ –≤—á–∏—Ç—å",
      "–ì—Ä–æ–º–∞–¥—è–Ω—Å—å–∫–∞": "7 –ø–∞—Ä–∞–≥—Ä–∞—Ñ –≤—á–∏—Ç—å"
    },
    "–ü‚Äô—è—Ç–Ω–∏—Ü—è (2025-10-17)": {
      "–í—Å–µ—Å–≤—ñ—Ç–Ω—è –Ü—Å—Ç–æ—Ä—ñ—è": "–ó 1 –ø–æ 3 –ø–∞—Ä–∞–≥—Ä–∞—Ñ –±—É–¥–µ –∑–∞–ª—ñ–∫"
    },
    "–°–µ—Ä–µ–¥–∞ (2025-10-22)": {
      "–Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏ // –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è": "–£–∫—Ä –Ü—Å—Ç–æ—Ä—ñ—è 6 –ø–∞—Ä–∞–≥—Ä–∞—Ñ –≤—á–∏—Ç—å –∞–±–æ —Ü–µ –Ω–∞ —á–µ—Ç–≤–µ—Ä —è–∫—â–æ –±—É–¥–µ –≥–µ–æ–≥—Ä–∞—Ñ—ñ—è",
      "–Ü—Å—Ç–æ—Ä—ñ—è": "–ì—Ä–æ–º–∞–¥—è–Ω—Å—å–∫–∞ 8  –ø–∞—Ä–∞–≥—Ä–∞—Ñ –≤—á–∏—Ç—å"
    }
  }
}
{
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "–ü—Ä–æ—á–∏—Ç–∞—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ 10-15",
    "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫": {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "–ü—Ä–æ—á–∏—Ç–∞—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ 10-15 /add 2025-10-14 –ë—ñ–æ–ª–æ–≥—ñ—è –í–∏–≤—á–∏—Ç–∏ —Ç–µ—Ä–º—ñ–Ω–∏"
    },
    "<–ü–æ–Ω–µ–¥—ñ–ª–æ–∫>": {
        "<–ú–∞—Ç–∏–º–∞—Ç–∏–∫–∞>": "<–í–∏–≤—á–∏—Ç–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ>",
        "<–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞>": "<–í–∏–≤—á–∏—Ç–∏ —Ç—É–ø–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ>"
    },
    "<14>": {
        "<–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞>": "<–í–∏–≤—á–∏—Ç–∏ —Ç—É–ø–∏–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ>"
    },
    "<–ø—è—Ç–Ω–∏—Ü—è>": {
        "<–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞>": "<—á–∏—Ç–∞—Ç—å –ø–∞—Ä–∞–≥–∞>"
    }
}
